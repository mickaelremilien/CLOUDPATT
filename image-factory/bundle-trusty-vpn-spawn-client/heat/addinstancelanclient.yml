heat_template_version: 2013-05-23

description: >
  HOT template to deploy one instance into the existing VPN Client Lan

parameters:

  key_name:
    type: string
    description: Name of keypair to assign to servers
    default: my_key

  image:
    type: string
    description: Glance Image
    default: "Ubuntu 14.04"

  flavor:
    default: n1.cw.standard-2
    description: Flavor to use for the deployed instance
    type: string
    label: Instance Type (Flavor)
    constraints:
      - allowed_values:
          - s1.cw.small-1
          - n1.cw.standard-1
          - n1.cw.standard-2
          - n1.cw.standard-4
          - n1.cw.standard-8
          - n1.cw.standard-12
          - n1.cw.standard-16

  public_net_id:
    type: string
    description: ID of public network for which floating IP addresses will be allocated
    default: 6ea98324-0f14-49f6-97c0-885d1b8dc517

  private_net_id:
    type: string
    description: ID of private network into which servers get deployed
    default:

  private_subnet_id:
    type: string
    description: ID of private sub network into which servers get deployed
    default:

  server_cidr:
    description: /24 cidr of server subnet
    type: string

  client_cidr:
    description: /24 cidr of client subnet
    type: string

resources:

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: {get_param: public_net_id}

  floating_ip_link:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: client }

  client:
    type: OS::Nova::Server
    properties:
      name: Lan-client
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/usr/bin/env bash
            export DEBIAN_FRONTEND=noninteractive
            apt-get update 2>&1 >> /var/log/vpn_srv.log
            echo "$(date) - update done" >> /var/log/vpn_srv.log
            apt-get -o Dpkg::Options::="--force-confold" upgrade -y 2>&1 >> /var/log/vpn_srv.log
            echo "$(date) - upgrade done" >> /var/log/vpn_srv.log
            apt-get -o Dpkg::Options::="--force-confold" install openvpn -y 2>&1 >> /var/log/vpn_srv.log
            echo "$(date) - openvpn done" >> /var/log/vpn_srv.log
            mkdir /etc/ansible
            echo "[local]" >> /etc/ansible/hosts
            echo "127.0.0.1 ansible_connection=local" >> /etc/ansible/hosts
            sudo mkdir /home/cloud/config
            sudo chown -R cloud:cloud /home/cloud/config
            echo -n "$client_cidr$" >> /home/cloud/config/client_cidr
            echo -n "$server_cidr$" >> /home/cloud/config/server_cidr
            sed 's/\(.*\)\/.*/\1/' < /home/cloud/config/server_cidr > /home/cloud/config/server_cidr.tmp
            sed 's/\(.*\)\/.*/\1/' < /home/cloud/config/client_cidr > /home/cloud/config/client_cidr.tmp
            cp /home/cloud/config/server_cidr /home/cloud/config/client_cidr_gw.tmp
            cp /home/cloud/config/server_cidr /home/cloud/config/client_cidr_gw_df.tmp
            sed -i -e "s/\//:/g"  /home/cloud/config/client_cidr_gw.tmp
            sed -i -e "s/\//:/g"  /home/cloud/config/client_cidr_gw_df.tmp
            sed -i -e "s/0:24/100/g" /home/cloud/config/client_cidr_gw.tmp
            sed -i -e "s/0:24/1/g"  /home/cloud/config/client_cidr_gw_df.tmp
            git clone  https://github.com/mickaelremilien/CLOUDPATT.git
            sudo ansible-playbook /home/cloud/CLOUDPATT/image-factory/bundle-trusty-vpn-spawn-client/ansible/playbookclient.yml
          params:
            $client_cidr$: {get_param: client_cidr}
            $server_cidr$: {get_param: server_cidr}


  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      fixed_ips:
        - subnet_id: { get_param: private_subnet_id }
      security_groups: [{ get_resource: security_group }]

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress, protocol: TCP, port_range_min: 22, port_range_max: 22 }
        - { direction: ingress, protocol: TCP, port_range_min: 80, port_range_max: 80 }
        - { direction: ingress, protocol: TCP, port_range_min: 443, port_range_max: 443 }
        - { direction: ingress, protocol: ICMP }
        - { direction: egress, protocol: ICMP }
        - { direction: egress, protocol: TCP }
        - { direction: egress, protocol: UDP }

outputs:

  client_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ client, first_address ] }
