heat_template_version: 2013-05-23


description: All-in-one Jenkins stack


parameters:
  keypair_name:
    label: SSH Keypair
    description: Keypair to inject in instance
    type: string

  username:
    label: Apache2 Auth Username
    description: Basic auth username for all users
    type: string
    constraints:
      - length: { min: 4, max: 24 }
        description: Username must be between 4 and 24 characters
  password:
    label: Apache2 Auth Password
    description: Basic auth password for all users
    type: string
    hidden: true
    constraints:
      - length: { min: 6, max: 24 }
        description: Password must be between 6 and 24 characters

  flavor_name:
    default: s1.cw.small-1
    label: Instance Type (Flavor)
    description: Flavor to use for the deployed instance
    type: string
    constraints:
      - allowed_values:
          - t1.cw.tiny
          - s1.cw.small-1
          - n1.cw.highcpu-2
          - n1.cw.highcpu-4
          - n1.cw.highcpu-8
          - n1.cw.standard-1
          - n1.cw.standard-2
          - n1.cw.standard-4
          - n1.cw.standard-8
          - n1.cw.standard-12
          - n1.cw.standard-16
          - n1.cw.highmem-2
          - n1.cw.highmem-4
          - n1.cw.highmem-8
          - n1.cw.highmem-12

resources:
  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      ip_version: 4
      cidr: 10.0.1.0/24
      allocation_pools:
        - { start: 10.0.1.100, end: 10.0.1.199 }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress, protocol: TCP, port_range_min: 22, port_range_max: 22 }
        - { direction: ingress, protocol: TCP, port_range_min: 80, port_range_max: 80 }
        - { direction: ingress, protocol: TCP, port_range_min: 443, port_range_max: 443 }
        - { direction: ingress, protocol: ICMP }
        - { direction: egress, protocol: ICMP }
        - { direction: egress, protocol: TCP }
        - { direction: egress, protocol: UDP }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 6ea98324-0f14-49f6-97c0-885d1b8dc517

  floating_ip_link:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: server }

  # set_password:
  #   type: OS::Heat::SoftwareConfig
  #   properties:
  #     config:
  #       str_replace:
  #         template: |
  #           #!/bin/bash
  #           sudo mkdir /etc/htpasswd/
  #           echo -n $password$ | sudo htpasswd -i -c /etc/htpasswd/.htpasswd $username$
  #         params:
  #           $username$: { get_param: username }
  #           $password$: { get_param: password }

  parse_ip_address:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            sudo sed -i "s/# left=FLOATING_IP/left=$floating_ip$/g" /etc/ipsec.conf
          params:
            $floating_ip$: { get_attr: [floating_ip, floating_ip_address] }

  gen_keys:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash
        sudo ipsec pki --gen > /etc/ipsec.d/private/dragonKey.der
        sudo ipsec pki --self --in privateKey.der --dn "C=FR, ST=IDF, L=Paris, O=Cloudwatt, CN=Dragon" > /etc/ipsec.d/certs/dragonCert.der
        sudo ipsec restart

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: parse_ip_address }
      - config: { get_resource: gen_keys }

  server:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: keypair_name }
      image: $IMAGE$
      flavor: { get_param: flavor_name }
      networks:
        - network: { get_resource: network }
      security_groups:
        - { get_resource: security_group }
      user_data_format: RAW
      user_data:
        get_resource: server_init

  tomcat:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: keypair_name }
      image: 6ca0517d-fcc3-4354-8c10-e8c6cf1ac181
      flavor: { get_param: flavor_name }
      networks:
        - network: { get_resource: network }
      security_groups:
        - { get_resource: security_group }

outputs:
  floating_ip_url:
    description: StrongSWAN URL
    value:
      str_replace:
        template: http://$floating_ip$/
        params:
          $floating_ip$: { get_attr: [floating_ip, floating_ip_address] }
