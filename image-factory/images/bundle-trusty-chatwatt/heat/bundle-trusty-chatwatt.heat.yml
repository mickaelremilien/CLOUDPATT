heat_template_version: 2013-05-23


description: All-in-one Lets Chat stack


parameters:
  keypair_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string
  username:
    description: Username to access Lets Chat
    label: Apache2 Auth Username
    type: string
    constraints:
      - length: { min: 4, max: 24 }
        description: Username must be between 4 and 24 characters
  password:
    description: Password to access Lets Chat
    label: Apache2 Auth Password
    type: string
    hidden: true
    constraints:
      - length: { min: 6, max: 24 }
        description: Password must be between 6 and 24 characters

  volume_size:
    default: 10
    description: Size of Volume for LDAP Storage (Gigabytes)
    label: LDAP Volume Size
    type: number
    constraints:
      - range: { min: 2, max: 1000 }
        description: Volume must be at least 2 gigabytes

  flavor_name:
    default: s1.cw.small-1
    description: Flavor to use for the deployed instance
    type: string
    label: Instance Type (Flavor)
    constraints:
      - allowed_values:
          - s1.cw.small-1
          - n1.cw.standard-1
          - n1.cw.standard-2
          - n1.cw.standard-4
          - n1.cw.standard-8
          - n1.cw.standard-12
          - n1.cw.standard-16

resources:
  network:
    type: OS::Neutron::Net

  subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: network }
      ip_version: 4
      cidr: 10.0.1.0/24
      allocation_pools:
        - { start: 10.0.1.100, end: 10.0.1.199 }

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { direction: ingress, protocol: TCP, port_range_min: 22, port_range_max: 22 }
        - { direction: ingress, protocol: TCP, port_range_min: 80, port_range_max: 80 }
        - { direction: ingress, protocol: TCP, port_range_min: 8080, port_range_max: 8080 }
        - { direction: ingress, protocol: TCP, port_range_min: 443, port_range_max: 443 }
        - { direction: ingress, protocol: ICMP }
        - { direction: egress, protocol: ICMP }
        - { direction: egress, protocol: TCP }
        - { direction: egress, protocol: UDP }

  volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
      volume_type: standard
      metadata:
        fs_type: ext4

  volume_attachement:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server }
      mountpoint: /dev/vdb
      volume_id: { get_resource: volume }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: 6ea98324-0f14-49f6-97c0-885d1b8dc517

  volume_setup_script:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash
        sudo mkdir /vdb
        sudo mkfs -t ext4 /dev/vdb
        sudo mount /dev/vdb /vdb
        sudo service mongod stop
        # MongoDB
        sudo mv /var/lib/mongodb /vdb/mongodb
        sudo mkdir /var/lib/mongodb
        sudo mount --bind /vdb/mongodb /var/lib/mongodb
        # Uploads
        sudo mv /opt/lets-chat/uploads /vdb/uploads
        sudo mkdir /opt/lets-chat/uploads
        sudo mount --bind /vdb/uploads /opt/lets-chat/uploads
        sudo service mongod start

  set_password:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: |
            #!/bin/bash
            sudo mkdir -p /web/auth/
            (echo -n "$username$:Digest Authentication Required:" && echo -n "$username$:Digest Authentication Required:$password$" | md5sum | awk '{print $1}' ) >> /web/auth/.digest_pw
          params:
            $username$: { get_param: username }
            $password$: { get_param: password }

  server_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: volume_setup_script }
      - config: { get_resource: set_password }

  server:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: keypair_name }
      image: $IMAGE$
      flavor: { get_param: flavor_name }
      networks:
        - network: { get_resource: network }
      security_groups:
        - { get_resource: security_group }
      user_data_format: RAW
      user_data:
        get_resource: server_init

  floating_ip_link:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: server }

outputs:
  floating_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [floating_ip, floating_ip_address] }
